\section{Design pattern}{
Nell'architettura del sistema \textbf{MyTalk} sono stati impiegati dei design pattern che forniscono delle soluzioni note, corrette e ripetute di alcuni problemi affrontati.
	\subsection{Adapter}{
Il Design Pattern Adapter permette a classi diverse di operare anche quando utilizzano interfacce incompatibili. Il suo fine è di evitare la scrittura di parti del sistema già implementate in librerie esterne permettendone l'interoperabilità.\\
	\begin{figure}[h!tbp]
		\centering
		\includegraphics[scale=0.70]{\docsImg adapter.pdf}
		\caption{Design Pattern Adapter in UML\g .}
	\end{figure}
La scelta di questo Design Pattern dipende dal fatto che le librerie WebRTC\g~ sono mutabili nel tempo in quanto non ancora standardizzate. L'adapter permetterà di modificare solo i metodi della classe senza invalidare l'interfaccia pubblica della classe adaptee.
	}
%	\newpage
	\subsection{MVP}\label{patternMVP} {
	Il pattern architetturale MVP (Model - View - Presenter) è utilizzato in contesti dove è necessario sviluppare un'applicazione le cui componenti siano autonome e create mediante tecnologie differenti. Esso prevede di strutturare un'applicazione in tre componenti:
	\begin{itemize}
		\item[•] {\textbf{Model:} individua la rappresentazione dei dati dell'applicazione e delle politiche di accesso e modifica. }
		\item[•] {\textbf{View:} si occupa di rappresentare l'interfaccia grafica con la quale l'utente interagirà con il Presenter.}
		\item[•] {\textbf{Presenter:} identifica la parte logica del prodotto  facendo da tramite tra le richieste inoltrate dalla View al Model ed aggiornando la View a seguito delle operazioni svolte dall'utente.}
	\end{itemize}
	\begin{figure}[h!tbp]
		\centering
		\includegraphics[scale=0.40]{\docsImg MVP.png}
		\caption{Schema architetturale e collaborativo del pattern MVP.}
	\end{figure}
Il pattern MVP permette la personalizzazione dell'interazione tra livelli; \textbf{\mytalk} è sviluppato attraverso la variante \textit{Passive View} la quale prevede che sia la componente Presenter ad aggiornare la View e che gli eventi generati dalla componente View siano gestiti dalla componente Presenter.\\
Questa scelta implementativa comporta una più agevole progettazione in quanto le comunicazioni tra le parti sono incentrate nella componente Presenter.
Questo approccio porta ai seguenti vantaggi:
\begin{itemize}
	\item[•] Indipendenza tra le componenti Model e View;
	\item[•] Separazione dei ruoli e delle relative interfacce;
	\item[•] Semplice supporto per nuove funzionalità alla tipologia di utente;
	\item[•] Ruolo cardine della componente Presenter che semplifica la progettazione e la manutenzione. 
\end{itemize}
		}

}

